package test;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;

//import utils.FastaReader;
//import utils.FastaReader.FastaEntry;
import CAMPS.hmm.ASMapping;
import CAMPS.hmm.SecOrderHMM;
import CAMPS.utils.DBAdaptor;
import CAMPS.utils.Global;
import CAMPS.utils.MaxList;
import CAMPS.utils.Utils;
import be.ac.ulg.montefiore.run.jahmm.Hmm;
import be.ac.ulg.montefiore.run.jahmm.ObservationInteger;

public class TestHmms {

	/**
	 * @param args
	 */
	 private static final Connection CAMPS_CONNECTION = DBAdaptor.getConnection("CAMPS4");
public static void run3(int clusterID, int ThreshLevel) {
		
		try {
			//Connection connection = null;
			//connection = DBAdaptor.getConnection("CAMPS4");
			
			//Statement statement = CAMPS_CONNECTION.createStatement();
			ArrayList <String> clusids = new ArrayList<String>();
			ArrayList <String> ids = new ArrayList<String>();
			ArrayList <String> seqs = new ArrayList<String>();
			/*
			String query = "SELECT cluster_id, sequenceid from clusters_mcl where cluster_threshold=5 limit 20";
			ResultSet result = statement.executeQuery(query);
			
			while (result.next()) 
			{
				String id = result.getString("sequenceid");
				String clusid = result.getString("cluster_id");
				PreparedStatement pstm = CAMPS_CONNECTION.prepareStatement("SELECT sequence FROM sequences2 WHERE sequenceid=?");
				pstm.setInt(1, Integer.parseInt(id));
				String seq = "";
				ResultSet rs = pstm.executeQuery();
				while(rs.next()){
					seq = rs.getString("sequence");
				}
				/*
				 *  clusid 0 seqid 5082 thresh 5  MKNSTPSSSDVDVQERIGMRKIVAFIAMTVGMFMAILDIQIVSSSLAEIQAGLSASSNEISWVQTSYLIAEVIMLPLSGFLGRLLSTRVLFSVSAAGFTIASILCATATSIEQMIVYRALQGFIGGGIIPCVFVASYIMFppskrpiispiiGLVATLAPTIGPTVGGYVSHALSWHWLFLINVPFGIIISILAWKLIDFDKADPSLLAKFDWWGLISMALFLGSLEYVLEEGAHRDWFNDNLVFSFFIIMVLSASVFFWRVFNVKEPIVDLtafsnfnfsistifafMlgiglygltylyPVYLSQIRHYDALMIGKTLFISGLAMFFTAPLSGFLSARIDPRIMIAVGFAGFAWGTWLATSITDDWGFWELLWPQILRGSSMMLCMVPINNIAFGSLSPERMKNASGIFNLMRNLGGAVGLAIISTLITQRTNLHYERIAEAVQPGNIQATETLASFTKLFSFSTFDPQALALVQLFNMVYTQAAVMAfsdlffmifflfsiltfltfflKKIPPSTNIRAEH
				 *  clusid 0 |    5404198 thresh 10 MNHNKWPLRGKTVLAGAGAVLRSPRWHRRvlwavgawlllwalayaavPFILKSQLEKIGTEKLGRRVSVGAVDFKPWTLELTINDlaiakaqpaalqppaapaapqlkiRRLYIDAELASLLRLAPVADALVVEEPVASLTYLGQGRYDIDDILARLKKPDAQPAGEAPQFSLYNLVLSGGQIDFVDQSVHKTHALRDLRLAVPFLSNLASQREIKTAPHLAFTLNGSRFDTAAVATPFASNHKTDAAFALRGFDLQPYLAYWPASLPFRLQSAVLHADVKVAFEQTAAPVVRISGSVTADKVRLLQasgpdaapgagaellaFDRLHLTLDDVRPLEQMVKLSAVELTAPTLSITRDRAGRLNLLPVDAQSATKniaisagaasangQNDIKNQAVASAIPWTVLVTRVNVRGGSVNWRDETLPSPAQIRLKDLVLNasaiaypfaasapLQFNGSLGLDPSALNVPTQGkavakspapapapvtapapaLVTFKGSATDRAADITADVAAWPLSMAAKYVGQFLLPALNGRLDAQLGVKWQAALADQPQALRITAPAIAVSDVQLAQGATSLVSIQRAELAQVEIDLPGQSFKAAHMQLSQPRARVERDAAKRWMYERWLVSHGQaappaapktgtgapSWAVAINEVLLDGGTVSFSDKAGAKPVAFEVTAAKAQLGGLVLGDSPAGKAQAVQAMPLSASLRLATGRSPPGKLDFKGSLALAPLQAKGQLAVERLPVQAFEPYFAGALNIELLRADASFMGRVAYRQTAAGPQLEAAGDVALEQFRANTLAPAEDLLAWKALNVRGLKVALEPGKATRVDVKETVLSDFFARVIVMPDGRINLQDLVKPAAPASTAHQDATKKVAADASQESAKGMKDLKNpaaapaspppIVNIGPISLINGQVRFSDRFIKPNYSADLSELTGKLsafssvaasapagqaaapamaDLELRGKAEGTASLEILGKLNPLVTPLALDITGKVRDLELPPLSPYAVKYSGYGIERGKMSVDVNYVVLPDGRLTARNKLVLNQLSFGDKVAGSTASLPVKLAVALLADRNGVIDLDLPISGSLNDPQFSLGPvivkvilnvivkaiTAPFSLLAHALGGGGDELGRVDFAAGSAQLSPDARAGLDKVAKALAERPALVLTVAGTSSLDAERDGFQREQLAEKVRAEKRRQMVRDGLALSPETSVSPDEYPALLKAVYKQSELPKPRNLIGLVKDQPVAEMEKLLLAGIPASPEALHELAVKRAISVKDYLISRGLPPARLFLGAAKAMPPEAKSTPHAELNLAMP
				 *  clusid 0 |    2255793 thresh 90 MRQMETHSLQTTHAPDYVGFLFLLAGWILTVLFVDPFHRMFFINDLQISYPYAVHERVPVFMNFVYALFIPLGVLIAFNVATRAPAAKHEVTYLSFLISIVLTSFITDIIKNAVGRPRPDLLDRCQPAVGTKANTLVTIDVCTREDGHILQEGWRSFPsghssfsfaglgflslflagQLHVFRYAAGGRDLSRALVCLLPLIGAGMVAISRCEDYRHDVYDVCVGSALGMSIAYWSYRRHWPRLSSQKCDEPYPRPGVDTQPGWQRFTDDEEAARGTDVGFEMDNLRGSRR
				 */
			/*
				System.out.print(clusid+ "    "+id+ "    " +seq+ "\n");
				clusids.add(clusid);
				ids.add(id);
				seqs.add(seq);
			}
		*/
			/*
			clusids.add("0");	//5
			ids.add("5082");
			seqs.add("MKNSTPSSSDVDVQERIGMRKIVAFIAMTVGMFMAILDIQIVSSSLAEIQAGLSASSNEISWVQTSYLIAEVIMLPLSGFLGRLLSTRVLFSVSAAGFTIASILCATATSIEQMIVYRALQGFIGGGIIPCVFVASYIMFppskrpiispiiGLVATLAPTIGPTVGGYVSHALSWHWLFLINVPFGIIISILAWKLIDFDKADPSLLAKFDWWGLISMALFLGSLEYVLEEGAHRDWFNDNLVFSFFIIMVLSASVFFWRVFNVKEPIVDLtafsnfnfsistifafMlgiglygltylyPVYLSQIRHYDALMIGKTLFISGLAMFFTAPLSGFLSARIDPRIMIAVGFAGFAWGTWLATSITDDWGFWELLWPQILRGSSMMLCMVPINNIAFGSLSPERMKNASGIFNLMRNLGGAVGLAIISTLITQRTNLHYERIAEAVQPGNIQATETLASFTKLFSFSTFDPQALALVQLFNMVYTQAAVMAfsdlffmifflfsiltfltfflKKIPPSTNIRAEH");
			
			clusids.add("0");	//10
			ids.add("5404198");
			seqs.add("MNHNKWPLRGKTVLAGAGAVLRSPRWHRRvlwavgawlllwalayaavPFILKSQLEKIGTEKLGRRVSVGAVDFKPWTLELTINDlaiakaqpaalqppaapaapqlkiRRLYIDAELASLLRLAPVADALVVEEPVASLTYLGQGRYDIDDILARLKKPDAQPAGEAPQFSLYNLVLSGGQIDFVDQSVHKTHALRDLRLAVPFLSNLASQREIKTAPHLAFTLNGSRFDTAAVATPFASNHKTDAAFALRGFDLQPYLAYWPASLPFRLQSAVLHADVKVAFEQTAAPVVRISGSVTADKVRLLQasgpdaapgagaellaFDRLHLTLDDVRPLEQMVKLSAVELTAPTLSITRDRAGRLNLLPVDAQSATKniaisagaasangQNDIKNQAVASAIPWTVLVTRVNVRGGSVNWRDETLPSPAQIRLKDLVLNasaiaypfaasapLQFNGSLGLDPSALNVPTQGkavakspapapapvtapapaLVTFKGSATDRAADITADVAAWPLSMAAKYVGQFLLPALNGRLDAQLGVKWQAALADQPQALRITAPAIAVSDVQLAQGATSLVSIQRAELAQVEIDLPGQSFKAAHMQLSQPRARVERDAAKRWMYERWLVSHGQaappaapktgtgapSWAVAINEVLLDGGTVSFSDKAGAKPVAFEVTAAKAQLGGLVLGDSPAGKAQAVQAMPLSASLRLATGRSPPGKLDFKGSLALAPLQAKGQLAVERLPVQAFEPYFAGALNIELLRADASFMGRVAYRQTAAGPQLEAAGDVALEQFRANTLAPAEDLLAWKALNVRGLKVALEPGKATRVDVKETVLSDFFARVIVMPDGRINLQDLVKPAAPASTAHQDATKKVAADASQESAKGMKDLKNpaaapaspppIVNIGPISLINGQVRFSDRFIKPNYSADLSELTGKLsafssvaasapagqaaapamaDLELRGKAEGTASLEILGKLNPLVTPLALDITGKVRDLELPPLSPYAVKYSGYGIERGKMSVDVNYVVLPDGRLTARNKLVLNQLSFGDKVAGSTASLPVKLAVALLADRNGVIDLDLPISGSLNDPQFSLGPvivkvilnvivkaiTAPFSLLAHALGGGGDELGRVDFAAGSAQLSPDARAGLDKVAKALAERPALVLTVAGTSSLDAERDGFQREQLAEKVRAEKRRQMVRDGLALSPETSVSPDEYPALLKAVYKQSELPKPRNLIGLVKDQPVAEMEKLLLAGIPASPEALHELAVKRAISVKDYLISRGLPPARLFLGAAKAMPPEAKSTPHAELNLAMP");
			
			clusids.add("0");	//90
			ids.add("2255793");
			seqs.add("MRQMETHSLQTTHAPDYVGFLFLLAGWILTVLFVDPFHRMFFINDLQISYPYAVHERVPVFMNFVYALFIPLGVLIAFNVATRAPAAKHEVTYLSFLISIVLTSFITDIIKNAVGRPRPDLLDRCQPAVGTKANTLVTIDVCTREDGHILQEGWRSFPsghssfsfaglgflslflagQLHVFRYAAGGRDLSRALVCLLPLIGAGMVAISRCEDYRHDVYDVCVGSALGMSIAYWSYRRHWPRLSSQKCDEPYPRPGVDTQPGWQRFTDDEEAARGTDVGFEMDNLRGSRR");
			
			clusids.add("0");	//100 camps3
			ids.add("7343024");
			seqs.add("MSLRNSLEESLLTSETADEANIPSPINKSTRIDVGANFSELTPEKYTIEYENETLFIDSLDWRQSNLLKAQIVTSYACYIIFGMAEQTVGVLIPKFQAYYEVDDMQTSFIFLAVVLGYIISAVLSETTHQRVGVKGVLMAGGICMVCGYSMISLKPPFFLLVCFYVlnglalggldagINTWMGGLKDSNPILGILHGCYGIGCMISPPLISHLLSRKHNPWQWNyyyyvlallavfslvtvavtfRFETAKKFRYQTVMKASARAKQENDVELQSLDNEEEETPVEDHAVPFSEVVKSKLVWTFAIILFMYVGGEVAFGSWLISFLMRIKKLTYKKSSYMATSFWTGLTVGRMCLGFVTEMFFANELTANLVYIggsfgglllfwllafTNAIPLLFLIVFLTGISIGPIFPTTIVAAINILPVKFHTagvgficafgggggaaipfligTIAESSASGMRIFPLVICISYGLLLIGWGIITKRYNH");
			
			
			clusids.add("0");	// camps3 from web known sc
			ids.add("7343025");
			seqs.add("MTDWPILSTVTFLPLVGVILILFIKDNSEAEKCNIRNVAffttvfvffISLIIWVSFDNTNSNFQMVEKFDWLGSGISYHMGIDGISILFVVLSAFLLPFCVLASWETVKDRLKAYMIAFLLLEVAIIGVFCSLDAVLFYIFFEGSLIPMFIIIGVWGGARRVYASMKFFLYTLLGSVLMLVAIMAMYWEAGTLDIPTLLNYQFPISMQMWLWLAFFASFAVKMPMWPVHTWLPDAHVEAPTAGSVILAGVLLKLGGYGFLRFSLPMFPVASVDFSPFVLVLSLIAIIYTSLVALVQNDMKKLIAYSSVAHMGYVTMGIFAANEQGVQGAIYQMLSHGIVSAALFLCVGVIYDRLHTREISAFGGLVNNMPKYAVVFLILTMANVGLPGTSGFLGEFLTLIGVFQINKLVAIFTTTGVILSAAYALYLYRRVIWGTLDKESLKILCDLSQREKFLLYPMIILTIFFGIYPTPIFQTTAFSVKALTNQLH");
			*/
			
			// RepTest
			//clusids.add("0024");	// camps3 from web known sc no1
			//ids.add("19620");
			//seqs.add("MAQRQNTSIFSAELVWQAIRDSVTKLDPRQLIRNPVMFttasvallatvllvRSIISGGDIVFEAQIVFWLWLTVLFGNFAEALAEGRGRAQAASLRSTKAELKGKRVKGDTVKVVPASELRAGDIVLVETGDQIPADGEVVEGVASVNEAAITGESAPVIRESGGDRSAVTAGTRVISDWIKVRVTAEPGEGFLDRMISLVEGASRAKTPNEVAltvlltgltliflIAVGTLPAFAAYAGGSISVPILVALFVALIPTTISALLSAIGIAGMDRLIRFNVLAKSGRAVEAAGDIDTLLLDKTGTITLGDRQATDFLPLSGVREGELVEAARLSSLGDETPEGRSIVelaeagetapagaeMVSFTAQTRVSGIDIGDRKIRKGAVDAILKLHDFDPGAVRQIRTLTEKIARAGGTPLAVADGTRLLGAIALKDIVKAGIKDRFAELRRMGIRTVMITGDNPLTAAAIAAESGVDDFLAEATPEDKLALIRKEQSGGKLVAMCGDGTNDAPALAQSDVGVAMNTGTQAAREAGNMVDLDSNPTKLIEIVGIGKQLLMTRGALTTFSISNDVAKYFAILPAIFVALYPGLDALNVMGLSSPQSAILSAIIFNAVIIPLLVPLALRGVTYRPQSAARQLVRNLGIYGLGGLIVPFVGIKLIDVVVSGLGRA");
			
			//clusids.add("0121");	// camps3 from web known sc no2
			//ids.add("221848");
			//seqs.add("MLGLFFRQVWTLTVKNLLIVLVRPTFTTTLRALVLPVIFVAFISFAKNLFIPPAEYGIGSPTPVRSLGDALGAVSGSRDKVVFVHNGLTGGDIEQVINRVAEPVRTTQKQVQVLSSENELRELCRTSLRGVSSCVAAAVFYSSPTEGPGGHWNYSIRTDGALGVGIKVDQRDNDQETYLLPFQHSIDWAIAQANASSEQNALPNELLEYPFTSLTQAERKDQIRTRYMGaiidiiavaifievvGVTYQLTGLIAMERELGMSQLIDCMMPSHSHWQSQAARFISAHLALDIVYGPAWVIAGIILKYGVFRRTSAGILVIYNILAGLSLASFSVFGASFFRKAQLSGISIVIACLLLGVIAQLAPASSSGAVGILSLLFPPMNFVYFFVLMARWERQNLPTNLVHAAPNSSHSIPGIAFWILLIVQIIVYPVLAAVVERALYGTTSKSRKILNTDDPTALSLNGFTKTYRPSWFYRNVASRFGSTRQSVYAVNDLSMNVRKGEIVVLLGANGSGKSTTLDAisglttissgsidiNYGGSGGRFGLCPQKNVLWDTLTVKEHVKIFNKLKSTGEVdkddellkllddcdlSHKVNARSKTLSGGQKRKVQLAMMLTGGSSICAVDEVSSGIDPIARAKIWDILLAARGSRTILLTTHFLDEADLLADHITILSKGVLRAQGSSVELKDRLGSGYRIHVLNVPGSEKVTGSEFENIPKEVHFDDTVYTVKDSATASRLMSMLEQKGITEYRVSGPTIEDVFLKVAEELDSNSVHEEISVGQKGTIVSEKNATDGEHGGLQLLTGKRISMLLQSWYLFRKRATILRRNPVPYLAALLIPVIAAGLVTLFLKDATKPTCSGESTYRASSSESLASQNNFKFVIGPSDMITPSVLENFVSSLSGFTKPAQKESLDVESHFHLVNSLAEFDDYISTNYANVTPGGFYLGDTNSAPTFAWKGDNGEFPLSAFAQNALDNIITGTPIHFQFQYFDIPWQSGAGKTLQLIVYFGLAMAVYPALFSLYPTVEQLKNVRALHFSNGVRGVSLWLAYLTFDFCivvassvlaiiiFRAVSDVWYHAEYLFVVFFLYGLCSTILAYVVSLFSKSQLAAFAIAAGGQCVLFLIYFIAYMSVLTYAPTQKVDDYLQVTHFTIGIISPTGNLLRALFTALNTFSILCRGREIASYPGEITLYGGPILYLILQSLVLFGLLLWVDRGPTFSMLRRTKNKDEEEKNAVDGDVAAELARVADSTDGLRVLHLSkkfkkfVAVDDVTFGVPKSQVFALLGPNGAGKTTTITLIRGDMQPSDNGGDILVNEVSVLKNRAAARSHLGVCPQFDAMDQMTVIEHLEFYARIRGVPDVKHNVTEVIRAVGLTSFQDRMATKLSGGNKRKLSLGIALMGNPQVLLLDEPSSGMDAASKRVMWKTLASVVPGRSIVLTTHSMEEADALATRAGIMAKRMLALGTTDYLRKKYGNKYHVHLVHSRAPHTTDADMARIREWVQDSFPSAVIEQKTYHGQVRFSVPATAEIIPSNEKSIERDKASVTADKFGRDVSDEPDVQRQEPKATNNNIVSKLFSKLEQGRALLGIQYYSVSQTTLDQVFLTIVGQHRVEEENSG");
			
			
			//clusids.add("0172");	// camps3 from web known sc no3
			//ids.add("253425");
			//seqs.add("MAEVIHNYSRSGAKLSQGYITEWKPVTGSLPPLSAADWESEFDLYRASPEFKLLNPHMTMEEFKKIYFMEWFHRLWGRFIGLSFVVPAAYFVARRKVSKPMALRLLGISGLIGFQGAIGWWMVKSGLKDDLFAPGSHPRVSQYRLTTHLGAAFICYTAMLWNGLSILRDRKLLFNSTPAQAHAHLLRLSSPSLSVFRKSVAGLALLVFTTAMSGGLVAGLDAGLIYNEFPRMGKGFAPPKSELFSEFYSRQPDRSDLWWRNMLENPSTVQLDHPL");

			//clusids.add("0270");	// camps3 from web known sc no4
			//ids.add("1351994");
			//seqs.add("MVMLPLHENSSTIRkkykknnkffggETSVKNFLERYSFTnkkdnkknekgtkLNILKYMKLYMQKPVKHRITFNIIVFTLFLVIIYIFYHKIENIKTVflisltlyslyfllfslymlsTILNDEYGDYNTLKKYDMTNNIYMNDNELNLINDKndvqqinnsqnnndnYVHQMTNDHNIQkkeikkeyeklkyDnhnnnennlinpynLEQNNQTFNQHISNEYEKNNINLIHTKNTNNDNKGDMKNEIGTNEGYEISSFDSIGIPIKEGSEGFFTVQYNSIFKISIVFTLLILSLYIIRGEDTKLPQGDNQMTDMMnnnnnnnnnnnnnssssnGTIIISSYAYGIITAISFLLGALCSSIAGYNGIYvavranvkvakaaTYSYKKALITCFRSGAVSAIVNVALAIFGICSLLLLVNILYPTLAFSKYPLLIVGYGFGASLVAMLYQLAGGIYTKAADIGADLVGKVEKHIPEDDPRNPAVIADLVGDNVGDCAGQCADLFESICAEIIASMILGGNLSENGIISEQTASYFVLFPLFVHSMDLLISTIGIYLVSVKNNNEPFSTLNLECNTKIIDKKDINYFNNINSNMHVEESAMQPLNNNNKEESDLLYAKYDCDVTSEQLENPLKAMLKAYFFTCSLGVVGFSFLCKLLFSLDNAKNAWIYFSFCGFIGMACSYLFVILTRYYTDYSYPKVKKIAHASLSGSATNIIAGLYVGLESTFFPvivisislllsyylGLKSNITGDHNIINGLYGTSVATMGMLSTAVFILSMSNFGPIADNAGGIVEMCKQPKYVRVITDKLDAVGNVTKANTKGFSVGsaalacfllfsaflsEVSVHSKMPFSTVDIAIPEVFIGGILGSVVVFLFAGWSLDAVGKTAEEVLKEVRRQFNEHPGILTYKEKPDYHTCVAIISKRALIETIKPGLLGVLSPIIVGLIFKqlgilqnnqllgaqaMASFIMFSTSTGILMALFLNNAGGAWDNAKKYIESGYYGGKNSQAHVSSVIGDTVGDPCKDTAGPSIHVLIKLISTITMVIL");

			clusids.add("0407");	// camps3 from web known sc no5
			ids.add("52576");
			seqs.add("MTALTEFATMYreretlslrtrllFTFgavaalhlaavvlllagtaggaqplalglvITAYVAGIKHSYDWDHIAAIDNSTRKFVAQHKDPVSVGFAFSLGHSSvvilagllvvagatligQFMEDGTTGNKvlgligsgvsglfllAMGLFNGSAFVRASSVYRQVQRGGDVRPEDLEAKGLIARLLAKPLSKVERPRNIYVIGFLFGLGFDTATTIGLLVITTTASLAGVSPLALMALPLAFTAAMTLCDSANGVAMMKMYKSAIHNPRRKLGFNALITGISAVSALFISVITLGGFANSAFELQDPLTTWLGSIDLGDAGLILVGLFVIVWAVASLRGRGAGSGT");
			/*
			clusids.add("0");	// camps3 from web known sc no6
			ids.add("7343025");
			seqs.add("MTDWPILSTVTFLPLVGVILILFIKDNSEAEKCNIRNVAffttvfvffISLIIWVSFDNTNSNFQMVEKFDWLGSGISYHMGIDGISILFVVLSAFLLPFCVLASWETVKDRLKAYMIAFLLLEVAIIGVFCSLDAVLFYIFFEGSLIPMFIIIGVWGGARRVYASMKFFLYTLLGSVLMLVAIMAMYWEAGTLDIPTLLNYQFPISMQMWLWLAFFASFAVKMPMWPVHTWLPDAHVEAPTAGSVILAGVLLKLGGYGFLRFSLPMFPVASVDFSPFVLVLSLIAIIYTSLVALVQNDMKKLIAYSSVAHMGYVTMGIFAANEQGVQGAIYQMLSHGIVSAALFLCVGVIYDRLHTREISAFGGLVNNMPKYAVVFLILTMANVGLPGTSGFLGEFLTLIGVFQINKLVAIFTTTGVILSAAYALYLYRRVIWGTLDKESLKILCDLSQREKFLLYPMIILTIFFGIYPTPIFQTTAFSVKALTNQLH");
			*/
			
			classify(clusids, ids, seqs);
			
			//classify(clusterID, fastaTrainingData, projectDir, "/HMMs/CAMPS3_nr"+redundancyLevel+"/");
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		
	}


private static void classify(ArrayList <String> clusterID, ArrayList <String> seqid, ArrayList <String> seq) {
	try {
		
		//sequences are given 
	
		
		int classified = 0;
		int correct = 0;
		int notCorrect = 0;
		
		//String hmmDir = "F:/SC_Clust_postHmm/RunMetaModel_gef/RunMetaModel_gef/HMMs/CAMPS4_1/";	//new
		String hmmDir = "F:/SC_Clust_postHmm/HMMs_old/HMMs_old/";	//old camps
		// load all HMMs
		ArrayList<SecOrderHMM> secOrderHMMs = loadHMMs(hmmDir);	
		
		for(String sequence: seq) {
			
			ArrayList<MaxList> maxList = new ArrayList<MaxList>();					
			double max = Double.NEGATIVE_INFINITY;
			int cluster = -1;
			double thres = 0;
			
			double confidence = 1;
			
			for(int k = 0; k < secOrderHMMs.size(); k++){				
				// test against all HMMs
				String ss = sequence.trim();
				
				double score = score(ss, secOrderHMMs.get(k));
				
				if((score + "").equals("NaN")){
					//System.out.println("NaN " + k + " " + secOrderHMMs.get(k).getClusterId());
				}else{
					maxList.add(new MaxList(score,new Integer(secOrderHMMs.get(k).getClusterId()), secOrderHMMs.get(k).getThreshold()));
					//below for CMSC HMM from old camps
					//maxList.add(new MaxList(score,new Integer(1234), secOrderHMMs.get(k).getThreshold()));
				}
				
				if( score > max){
					max = score;
					cluster = new Integer(secOrderHMMs.get(k).getClusterId());
					thres = new Double(secOrderHMMs.get(k).getThreshold());
					
				}
				System.out.println("Processed " + k + " of " + secOrderHMMs.size() + " -Score for this run " + score + " & max is " + max);
			}
			
			Collections.sort(maxList);
			confidence = max - maxList.get(1).max;	
			
			if(confidence >= Global.confidenceThreshold && max >= Global.scoreThreshold){
				classified++;
			}
			
			
			if(confidence >= Global.confidenceThreshold && max >= Global.scoreThreshold){
				correct++;					
				System.out.println("result:correct;score:" + max + ";confidence:" + new Double(confidence*100).intValue() / 100.0);
			
			}else if(confidence >= Global.confidenceThreshold && max >= Global.scoreThreshold){
				notCorrect++;
				System.out.println("result:false-" + thres + "," + cluster + ";score:" + max + ";confidence:" + new Double(confidence*100).intValue() / 100.0);
							
			}else{							
				notCorrect++;
				System.out.println("result:????-" + thres + "," + cluster + ";score:" + max + ";confidence:" + new Double(confidence*100).intValue() / 100.0);
				
			}				
		}
		
		//
		int total = seq.size();
		System.out.println("\nNumber of test sequences: " +total);
		double percClassified = 100 * classified/((double) total);
		System.out.println("Number of classified sequences: " +classified+" ("+percClassified+")");
		double percCorrect = 100 * correct/((double) total);
		System.out.println("Number of correctly classified sequences: " +correct+" ("+percCorrect+")");
		double percNotCorrect = 100 * notCorrect/((double) total);
		System.out.println("Number of not correctly classified sequences: " +notCorrect+" ("+percNotCorrect+")");
		
		
		if(notCorrect * 1.0 / seq.size() > Global.maxFalse){
			System.out.println("Bad cluster!");
		}
		
	}catch(Exception e) {
		e.printStackTrace();
	}
}




private static ArrayList<SecOrderHMM> loadHMMs(String hmmDir){
	ArrayList<SecOrderHMM> secOrderHMMs = new ArrayList<SecOrderHMM>();		
	File f = new File(hmmDir);
	File[] fileArray = f.listFiles();
	for(File file : fileArray){	
		if(!file.getName().endsWith(".hmm")) continue;
		SecOrderHMM tmp = new SecOrderHMM();
		
		//System.out.println("Loading hmm: " +file.getAbsolutePath());
		
		try{
			tmp = Utils.loadHmmFromFile(hmmDir, file.getName());
			//String[] name = file.getName().split("_|(\\.hmm)");
			//tmp.setClusterId(name[2]);
			//tmp.setThreshold(new Double(name[1]));
			
			// below is for HMM from old as name is CMSC00...
			tmp.setClusterId("1234");
			tmp.setThreshold(new Double(0));
			
			
			secOrderHMMs.add(tmp);
//			System.out.println("id: " + tmp.getClusterId() + "\t" + tmp.getThreshold());
		}catch(Exception e){	
			System.err.println(file.getName() +" not found");
			e.printStackTrace();
			//continue;
			System.exit(0);
		}
		//if(tmp != null){
			//secOrderHMMs.add(tmp);
		//}
	}	
	
	System.out.println();
	
	return secOrderHMMs;	
}


public static double score(String s1, SecOrderHMM secOrderHMM) throws Exception{

	Hmm<ObservationInteger> hmm = secOrderHMM.getHmm();
	ArrayList<ObservationInteger> seq = new ArrayList<ObservationInteger>();			
	for(int i = 0; i < s1.length(); i++){
		try{
			int number =  ASMapping.asToInt(s1.charAt(i));					
			seq.add(new ObservationInteger(number));
		}catch(Exception e){
			e.printStackTrace(System.err);
		}
	}			
			
	double score = hmm.lnProbability(seq);		
	return score;		
}



	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//int[] levels = new int[]{90,80,70,60,50,40};
		int[] levels = new int[]{40};
		
		//int clusterID = Integer.parseInt(args[0]);
				
		int clusterID = 0;
		for(int level: levels) {
			System.out.println("\n################################################################");
			System.out.println("#");
			System.out.println("# Level: "+level);
			
			//run1(clusterID, level);	
			//run2(clusterID, level);
			
			//run3(clusterID, level);	
			
			System.out.println("#");
			System.out.println("################################################################\n");
		}	

	}

}
